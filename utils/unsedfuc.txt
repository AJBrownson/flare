
//recent function for getresilt 
  const getResult = (spin: number) => {
    // Find net rotation and add to offset angle
    // Repeat subtraction of inner angle amount from total distance traversed
    // Use count as an index to find value of result from state list
    let arcSize = (2 * Math.PI) / list.length;
    let netRotation = ((spin % 360) * Math.PI) / 180; // RADIANS
    let travel = netRotation + easeOut;
    let count = rotate + 1;
    while (travel > 0) {
      travel = travel - arcSize;
      count--;
    }
    let finalResult;
    if (count >= 0) {
      finalResult = count;
    } else {
      finalResult = list.length + count;
    }

    // Set state variable to display result
    setResult(finalResult);
  };


  if (!publicKey) {
      toast.info('Wallet not connected!', {position:'bottom-left'});
      return;
    }

    try {
      const recipientPubkey = new PublicKey("CCCj4vfUwEGsG9aUSrzLBkBR5F5HEgbKYzz6wYmE1UyC");
      const lamports = solToLamports(sol); // Convert SOL to lamports

      toast.info('Signing transaction...');
      const signature = await sendSolTransaction(connection, publicKey, recipientPubkey, lamports, sendTransaction);

      toast.success(`Transaction successful with signature!`,{position:'bottom-left'});
      console.log('Executing additional logic after transaction...');

      // Show the spinning wheel

       // Set random spin degree and ease out time
      // Set state variables to initiate animation
      let randomSpin = Math.floor(Math.random() * 4000) + 500;
      setRotate(randomSpin);
      setEaseOut(2);
      setSpinning(true);

      // Calculate result after wheel stops spinning
      setTimeout(() => {
        getResult(randomSpin);
      }, 3000);
    }